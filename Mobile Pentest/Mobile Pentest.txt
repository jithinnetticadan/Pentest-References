Mobile Pentesting OWASP Gitbook: https://mobile-security.gitbook.io/mobile-security-testing-guide/overview/0x03-overview
OWASP Mobile Top 10: https://owasp.org/www-project-mobile-top-10/
SecJuice Intro to Frida & Objection: https://www.secjuice.com/objection-frida-guide/
HackTricks Checklist (Android): https://book.hacktricks.xyz/mobile-apps-pentesting/android-checklist
HackTricks Checklist (iOS): https://book.hacktricks.xyz/mobile-apps-pentesting/ios-pentesting-checklist
https://www.hackthebox.com/blog/intro-to-mobile-pentesting
https://github.com/prateek147/DVIA-v2


Mobile Pentesting Process - Reconnaissance -> Static Analysis - > Dynamic Analysis -> Report

Interview Note - Won't find any XSS vuln in mobile app but there is a possibility changes made to the app can get affected to the web application.

***** Android - Pentesting*****

Setup
**Windows**
JADX-GUI Tool
-Install Java - java.com (default parameters)
-Get the latest release for windows exe format JADX - (https://github.com/skylot/jadx)
- Install ADB - used to get a shell on our emulator
	google -> android tools -> sdk platform tools link ->download sdk for preferred OS -> extract and paste it in C:/Windows folder and update env variables (Possible to download directly from android studio
- Install APKtool -> serach apktool -> (https://ibotpeaches.github.io/Apktool/) -> Read the install documentation for preferred OS
- Install Android Studio -> default params
- Install MobSF -> lone git repo -> run requirements.txt -> ./setup.bat -> ./run.bat

*****Kali Linux***
- Install PimpMyKali - installs the below tools all in one-go ->(https://github.com/Dewalt-arch/pimpmykali)
- Install ADB -> sudo apt-get install adb
- Install APKTool -> sudo apt-get install apktool -> same as windows -> read install documentation
- Install JADX-Gui -> sudo apt-get install default-jdk (java --version) -> sudo apt-get install jadx (cmd - jadx-gui)
- Install Android studio
- Install MobSF -> lone git repo -> run requirements.txt -> ./setup.sh ->./run.sh

*********Mac*********
- Install Brew - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
- Install JADX-Gui -> brew install jadx -> (cmd -> jadx-gui)
- Install apktool -> brew install apktool -> (cmd -> apktool)
- Install Android studio
- Install adb, fastboot and other stuff - brew install android-platform-tools
- Install MobSF -> lone git repo -> run requirements.txt -> ./setup.sh -> ./run.sh

**Note - Make use of emulator that does not have playstore symbol and less google API level since the above cannot be rooted.***


Tools
JADX-GUI, ApkTool - reverse eng
keytool -> jarsigner -> zipalign - resign apps
cloud_enum -> used to find storage buckets (GCP,AWS,Azure) -> https://github.com/initstring/cloud_enum
awscli -> sudo apt-get awscli (used to trigger aws commands using cmd "aws")
https://aws.amazon.com/cli/
dex2jar tool  -> convert smali file jar (human readable)
firebase_enum tool -> similar to cloud enum
https://github.com/Sambal0x/firebaseEnum
MobSF - https://github.com/MobSF/Mobile-Security-Framework-MobSF
BurpSuite, Proxyman (works only on macos)
Frida - runtime manipulation and dynamic analysis(pip3 install frida-tools)
Objection - Built on top of frida for easier process (pip3 install objection) (install frida-tools before objection)
SQLite Viewing tool : https://sqlitebrowser.org/ 
Frida Scripts to Bypass security features : https://codeshare.frida.re/ (can be used if frida is injected to application)
Ghost Framework- https://github.com/EntySec/Ghost
AnyTrans - Pull .ipa file from AppStore (https://www.imobie.com/anytrans/download.htm)


https://source.android.com/docs/security/overview/app-security


Architecture
- Every app is run a virtual machine known as Android Runtime.(old version - Dalvik bytecode, new version - Android Runtime ART)
- ART used for conversion from High Level to Low Level.
- Every app runs in its own sandbox VM (cannot communicate unless expllicitly allowed) and contains a filesystem that is isolated from other apps. Creates a new user unique for app to read/write to the files.
- UID between 10000 - 99999 (owner of app directory)
- file paths
	/data/app/com.example.app - generic app data
	/data/data/com.example.app - runtime storage data
	/mnt/sdcard/Android/data/com.example.app - externaly stored location for runtime
	/data/data/com.example2.app - different app requiring different user
- Apps can interact with each other only if Content Provider/Broadcast Receivers are exposed.
- Root user/System level account is required to access all the directory irrespective of the application.
- Profiles - Personal and Work (BYOD Concept) -> used to prevent data exfiltration
- Users - Primary - created when switched ON, Secondary, Guest, Kid mode

** Layers Architecture **
- Linux Kernel
- H/W abstraction layer
- Libraries (Natve C or ART) (apps running in C/C++ does not require a VM)
- Java API layer - allows interact with other apps via Content Providers
- System Apps

**App security and Signing**
- get source code by reverse engineering and is prevented by signing the app
- resign apps using tools - keytool -> jarsigner -> zipalign
- apps must be signed in order to run on phones


***Testing***
- Pull apk file from play store using separate emulator having playstore symbol and higher API level
	* Go to terminal in studio
	* adb shell
	* pm list packages | grep appname (copy package name)
	* pm path <packagename> -> (copy path)
	* exit
	* create a folder in our system
	* adb pull <path> <filename.apk>
- AWS Storage Buckets
	* make use of jadx-gui tool to go through every files to find anything related
	* search for cloud_enum tool and read the manual
	* install awscli (sudo apt-get awscli) to trigger aws commands
	* aws configure --profile  <appname>
	* https://aws.amazon.com/cli/ (documentation)

- Android Manifest.xml (jadx-gui -> Inside Resources folder)
	* basics of application are defined (minSDKVersion, Permissions, Activities, Content Providers)
	* might find hardcoded creds
	* https://developer.android.com/reference/android/Manifest.permission
	* https://developer.android.com/guide/topics/manifest/manifest-intro
	* protect certain activities such as varioud UI elements (login, money transfer) using intent filters
	* intent filters are before performing an activity we must be assigned a cookie or auth token.
	* "exported="True" means that specific activity is exposed to outside app
	* Content Providers - used to share data between other apps. If exported it can dangerous and expose any data to user or app
- Make use of apktool as ther emight be some differences wrt JADX-Gui
	* apktool d <apkfielname>
	* .so means shared object
	* use dex2jar tool (if using apktool) -> jadx-gui does this auto

- Common app strings to search (api, id, password, username, .com etc, aws, gcp, azure, http, https, secret, key etc)
	* found in resources/----/strings.xml
	* also in activity source code
	* login bypass, urls exposed, api keys, firebase urls

- Bypass an activity by call other exported activity
	* go to terminal -> adb shell
	* am start <activity name along with appname and author> (put forwad slash right before the last dot ie before the activity name last octet)
- Enumerate firebase db using firebase_enum similar to cloud_enum
	* URL -> firebase.io.com/.json (sample)
-Using MobSF

*****Dynamic Analysis*****
-Bypass SSL Pinning
	* Proxy tools - Burp Ssuite, Proxyman
- MobSF Dynamic Analysis
	* Read Docmentation to setup - https://mobsf.github.io/docs/#/dynamic_analyzer
- Configure Burp Suite
	* https://portswigger.net/support/configuring-an-android-device-to-work-with-burp
	* export the CA certificate from Burp Suite in DER format (and rename extension to CER)
	 * Set the proxy address to intercept "All Interfaces"
- Setup Proxyman (only for mac devices) - https://proxyman.io/
- Patching application with frida & Objection to Bypass SSL Pinning
	* https://frida.re/docs/android/
	* https://github.com/sensepost/objection (patched frida automatically)
	* install frida-tools before installing objection
	* objection patchapk --source <apkfile> (automatic process)
	* if install certificates error appears try the manual process
  - Manual Process
	* https://koz.io/using-frida-on-android-without-root/
	* apktool d -r <apkfile>
	* Inject Frida gadget in lib folder
	* download frida gadget - https://github.com/frida/frida
	* wget <github link based on emulator cpu architecture> -> unzip the file
	* rename file to frida-gadget.so (rename according to the pattern other files are present in lib folder)
	* Add reference to frida-gadget to SMALI code inside method public constructor
	* Activity (usually MainActivity.smali, or OnboardingActivity.smali) 
	* Code = const-string v0, "frida-gadget" invoke-static {v0}, Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
	* apktool b <target.apk> -o <output_file.apk>
	* Sign with your key, and zipalign the app (refer the above link)
-Monitoring Clipboard using Objection
	* objecton explore
	* android clipboard monitor
- Dump Memory Data using objection
	* memory dump all
- Android Heap
	* android heap options (use help android heap to know more)
- Use 'sqlite'command to connect to db file using objection
- Objection contains various other commands (explore)
- Import Frida scripts obtained from Frida Codeshare
	* objection explore --srtup-script <jsfile>
	* objection explore -s "android root disable" (use default scripts in objection for bypass)

---------------------********************----------------------------



-------------------------------IOS Pentest---------------------------------

- References
	https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06a-platform-overview
	https://support.apple.com/en-in/guide/security/welcome/web
	https://www.bugcrowd.com/resources/levelup/a-basic-guide-to-ios-testing-in-2022/


- Basics
	- Jailbreaking to load our custom apps and access file structure
	- can sideload apps using xcode if we have the development license
	- free developer account can allow sideloading

- Architecture
	* Hardware/Firmware and Software layer
	* file system partitioned to User and OS

xCode Setup (developer license setup)
	-https://developer.apple.com/documentation/xcode
	- accounts -> add apple id ->create a team -> will auto create a developer licensed profile
	- to obtain provisioning profile craete a basic app in xcode install it in a physical decice
	- trust you developer id in device -> general -> profiles and device management -> accept developer id

- Statis Analysis
	* Objective-C and Swift
	* .ipa format
	* change ipa file to zip (rename .ipa to .zip) and unzip to obtain a payload folder
		- payload/application.app - app itself
		- payload.itunesmetadata.plist - info about app developer
		- payload/applicatio.app.info.plist - important app info is stored (android manifest.xml)
		- various json, assets,resources
	* automate using mobsf

- Dynamic Analysis
	- edit proxy listener and change config to "All Interfaces"
	- import certificate sam as we do for web apps dont neet to change the extension like we do in android testing
	- settings -> profile -> install certificate
	- settings -> about -> cert trust settings
  * Bypass SSLPinning
	- we can utilize objection and frida to bypass sslpinning similar to android (may not work always - requires a device to obtain a provisioning profile)
	- get provisioning profile -> terminal -> security find-identity (expires after 7 days since its free account)
	- objection patchipa --source <ipafile) -c <security find-identity or applesign -L>
	- another method is in a jailbroken device use tools like ssl killchain (hardware level)
	- https://github.com/nabla-c0d3/ssl-kill-switch2


- BurpSuite Mobile Assistant
	* https://portswigger.net/burp/documentation/desktop/tools/mobile-assistant/installing












