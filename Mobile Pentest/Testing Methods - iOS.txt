- Developed in Objective-C and Swift
- xCode iDE used.
- file extension as .ipa
- Cydia 3rd party app store for hacking tools
- due to diffrenece in architecture used in simulators(x86 arch) its required test in a real device(ARM arch)
- .h file is the header file and .m file is the implementation (priority is for .m file)
- debug the apps at runtime requires to jailbreak
- runtime analysis is mandatory for more vulnerabilities
- if device is not jailbroken we need to patch the app to insert frida dylib which is complex
- jailbroken device is starightforward
- developer account required which is free
- requires provisioning profile on the target device
- create provisioning profile and developer account using xcode in a mac

Lab setup in jailbreak an iphone
- jailbreak using checkra.in
- cydia - app store for pentesting tools
- download openssh from cydia
- in cydia add anotther repo in source https://build.frida.re
- instal frida server from the above repo - depending on chip install appropriate server

In mac
- require frida client on mac
- install objection on mac- runtime manipulation and more other use cases(local data storage) -github/sensepost/object -add to system if not working properly- frida cient automatically installed along with objection
- verify the isntalled apps
- go to terminal in mac - ssh root@iphoneip ->password = alpine (iphone ip from wifi settings)
- go to terminal in mac - frida-ps -Uai
- go to terminal in mac - type objection -> type objection --gadget "com.apple.mobilemail" explore (starts mail application in iphone)


Provisioning Profile includes signing certificates, device identifiers and bundle ID (embedded.mobileprovisioning) - enables device to be used for testing
- go to general in iphone -> profile and device management ->trust the profile
- obtain the embedded.mobileprovisioning in mac xcode ->products ->open finder ->open package contents

For same developer -  methods to embed provisioning profile
- sign the app using embedded.mobileprovisioning - can be done using applesign(npm install -g appliesign) - need to install using brew
commands in terminal
applesign -L (list signing identities available)
applesign -i <id> <app-name> -m embedded.mobileprovisioning



Testing using Non-Jailbroken Device

https://github.com/sensepost/objection/wiki/Patching-iOS-Applications
npm install -g ios-deploy
ios-deploy --bundle <appname> --debug -w








