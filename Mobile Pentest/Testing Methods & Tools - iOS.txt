- due to diffrenece in architecture used in simulators(x86 arch) its required test in a real device(ARM arch)
- .h file is the header file and .m file is the implementation (priority is for .m file)
- debug the apps at runtime requires to jailbreak
- if device is not jailbroken we need to patch the app to insert frida dylib which is complex
- jailbroken device is starightforward
- create provisioning profile and developer account using xcode in a mac

Lab setup in jailbreak an iphone
- jailbreak using checkra.in
- cydia - app store for pentesting tools
- download openssh from cydia
- in cydia add anotther repo in source https://build.frida.re
- instal frida server from the above repo - depending on chip install appropriate server

In mac
- require frida client on mac
- install objection on mac- runtime manipulation and more other use cases(local data storage) -github/sensepost/object -add to system if not working properly- frida cient automatically installed along with objection
- verify the isntalled apps
- go to terminal in mac - ssh root@iphoneip ->password = alpine (iphone ip from wifi settings)
- go to terminal in mac - frida-ps -Uai
- go to terminal in mac - type objection -> type objection --gadget "com.apple.mobilemail" explore (starts mail application in iphone)


Provisioning Profile includes signing certificates, device identifiers and bundle ID (embedded.mobileprovisioning) - enables device to be used for testing
- go to general in iphone -> profile and device management ->trust the profile
- obtain the embedded.mobileprovisioning in mac xcode ->products ->open finder ->open package contents

For same developer -  methods to embed provisioning profile
- sign the app using embedded.mobileprovisioning - can be done using applesign(npm install -g appliesign) - need to install using brew
commands in terminal
applesign -L (list signing identities available)
applesign -i <id> <app-name> -m embedded.mobileprovisioning




Traffic Analysis
	Setup proxy to 127.0.0.1:8080 -> browser serach for burp/
	Download the burp ca certificate -> go to settings and install the profile downloaded in VPN & Device Manangement
	using objection -> objection --gadget "com.app" explore -s "ios sslpinning disable"

Insecure Data Storage (/var/mobile/containers/Data/Application)

  Below files can be found in the application's respective folder (folder name would be UUID)
	Plist Files - xml file that stores key-value pairs 
	NSUserDefaults - similar to Plist files
	SQLite Databases - 
	Core Data - same as SQLite DB
	Keychain - apple's recommended way of storing sensitive on the device (wifi passwords, crypto keys, certificates etc)
	To dump keychain -> download keychain-dumper tool -> ssh into device -> create a folder mkdir /tmp/keychain -> use sftp to push the keychain_dumper file downloaded on mac -> cd /tmp/keychain ->run ./keychain_dumper > keychain.txt (in ssh session)
  Commands used:
	ssh root@<ip>
	find -type d -name <bundle-identifier> (to identify the application folder as it is in UUID name)
	file <any-file> (used to identify type of file)
	use cyberduck to pull files locally
	sqlite3 <db-file> or sqlite <dbfile> (based on output from file command)
	frida-ps -Uai | grep <appname-hint>
	objection --gadget "<com.app>" explore
		Run below commands inside objection session
		env (gives you all the directories related to specific app)
		file cat <filename to view)
		file download <filename to download>
		sqlite connect <db-file.db>
		ios nsuserdefaults get
		ios nsurlcredentialstorage dump
		ios plist cat Info.plist
		ios keychain dump
		ios info binary
		ios cookies get

Server Side Vulnerabilities
	similar to api testing
	intercept requests and exploit

Client Side Vulnerabilities

  Business Logic Vuln
	modify the values in local storage files (plist etc) to bypass authorization, escalate privileges etc
  
  Insecure Logging
	logs can be viewed from Xcode -> Device & Simulators -> Open Console

  Sensitive data in pasteboard
	objection --gadget "<com.app>" explore
	  ios pasteboard monitor
	 
  Client Side script injection (caused with the use of WebView) - WebView XSS
	intercept any webview requests and try xss payloads

Decrypt iOS Apps (apps are encrypted using Apple Fairplay DRM)
	Tools : clutch, bfinject, frida-ios-dump
	frida-ios-dump -> git clone -> pip install -r requirements.txt -> nano dump.py (modify iphone's ip, port username & password for ssh) -> python dump.py "com.app"

Dumping Class Information (class-dump tool)
	rename .ipa file to .zip file -> extract -> identify a binary/executable related to app
	run ./class-dump <provide binary/execuatble identified above>
	ios hooking list classes - (run inside objection)
	ios hooking list class_methods


Bypass Jailbreak Detection
  Using Objection -> objection --gadget "com.app" explore -s "ios jailbreak disable"
  can use other methods such as return a value to a method when launching app using objection (identify the method checking for jailbreak and override the value)

Runtime-Analysis using Frida

	Commands:
	  frida -U -n "application-name/display-name"
	  frida-trace -U -m "*[NSURLRequest *]" "application-name/displayname" (- denotes instance metthods & + denotes class methods)

Runtime Analysis using Objection

	objection --gadget "com.app" explore
	Commands:
		ios hooking watch class "class-name" 
		ios hooking watch method "method-name" --dump-args --dump-return --dump-backtrace

Dumping Heap/Memory using Objection

	objection --gadget "com.app" explore
		memory dump all <file-name>.dmp
	file saved to mac -> view using strings method

Reverse Engineering (Hopper Disassembler, iRET)
	convert the .ipa to .zip file
	identify the binary/executable file -> load it in hopper

Automated Static & Dynamic Analysis using MobSF

		
  



*******************************************************Tools***********************************************************

Quick Time Player - https://support.apple.com/downloads/quicktime
Openssh (root/alpine), SFTP Server, Filza (File Manager) - should be available in palera1in or any other jailbreak but needs o be installed
Source Url's : build.frida.re, https://cydia.radare.org/
Objection : pip3 install objection (contains frida client) - https://github.com/sensepost/objection
CyberDuck : https://cyberduck.io/ (view files via sftp in Mac)
iMazing : Sideload ipa files to iPhone
Xcode : https://developer.apple.com/download/all/?q=Xcode
keychaindumper - https://github.com/ptoomey3/Keychain-Dumper
MobSf - https://github.com/MobSF/Mobile-Security-Framework-MobSF
class-dump - brew install class-dump or http://stevenygard.com/projects/class-dump/(https://www.allysonomalley.com/?s=iOS+Pentesting+Tools)
clutch  - https://github.com/KJCracks/Clutch
radare2 - pull repo in iphone
Hopper - https://www.hopperapp.com/
iRet
IDA Free - https://hex-rays.com/ida-free/
Cycript - part of cydia (ssh into device -> run cycript
frida-ios-dump - https://github.com/AloneMonkey/frida-ios-dump
BFinject - https://github.com/BishopFox/bfinject
iRET - https://www.veracode.com/sites/default/files/Resources/Tools/iRETTool.zip



